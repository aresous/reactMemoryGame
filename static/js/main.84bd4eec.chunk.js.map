{"version":3,"sources":["components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","useState","clicked","setClicked","style","margin","padding","backgroundColor","bgcolor","border","cursor","borderColor","color","onClick","console","log","updateScoreFunc","text","App","newArry","key","randomColor","arry","setArry","currentScore","setCurrentScore","highScore","setHighScore","gameOver","setGameOver","shuffleFunct","newarry","sort","Math","random","updateScore","setTimeout","randomArry","map","i","max","floor","e","className","card","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAmBeA,EAjBF,SAACC,GACV,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgCF,mBAAS,GAAzC,6BAWA,OACI,qBAAKG,MAAO,CAACC,OAAO,GAAGC,QAAS,GAAIC,gBAAiBP,EAAMQ,QAASC,OAAO,QAASC,OAAO,UAAUC,YAAa,MAAOC,MAAM,SAAUC,QAAS,WAV/IX,GACCY,QAAQC,IAAI,qBACZf,EAAMgB,gBAAgBd,KAEtBY,QAAQC,IAAR,yBACAf,EAAMgB,gBAAgBd,GACtBC,GAAW,KAIf,SAAuKH,EAAMiB,Q,gBC4EtKC,MAtFf,WACE,IAAMC,EAAU,CACd,CAAEC,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAcJ,KAAM,KACvC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,KACxC,CAAEG,IAAK,EAAGZ,QAASa,MAAeJ,KAAM,MAG1C,EAAwBhB,mBAASkB,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAwCtB,mBAAS,GAAjD,mBAAOuB,EAAP,KAAqBC,EAArB,KACA,EAAkCxB,mBAAS,GAA3C,mBAAOyB,EAAP,KAAkBC,EAAlB,KACA,EAAgC1B,oBAAS,GAAzC,mBAAO2B,EAAP,KAAiBC,EAAjB,KACA,SAASC,IACP,IAAIC,EAAO,YAAOT,GAClBR,QAAQC,IAAI,yBAAiBgB,IACrBA,EAwCFC,MAAK,kBAAMC,KAAKC,SAAW,MAvCjCX,EAAQQ,GAQV,SAASI,EAAYjC,GAEnB,GAAIA,EAAS,CACXuB,EAAgB,GAChBI,GAAY,GACZO,YAAW,WACTP,GAAY,KACX,KACH,IAAIQ,EAAalB,EAAQmB,KAAI,SAACC,GAC5B,MAAO,CACLnB,IAAKmB,EAAEnB,IACPZ,QAASa,MACTJ,MAlBcuB,EAkBK,iBAjBlBP,KAAKQ,MAAMR,KAAKC,SAAWM,KADpC,IAAsBA,KAqBlBjB,EAAQc,QAEJX,GAAaF,IACfV,QAAQC,IAAIS,GACZV,QAAQC,IAAIW,GACZC,EAAaH,EAAe,IAE9BM,IAEAL,GAAgB,SAACiB,GACf,OAAOA,EAAI,KASjB,OACE,sBAAKC,UAAU,MAAf,UACE,gCACG,IADH,kBAEkBnB,EAFlB,eAE4CE,KAE3CE,EACC,yCAEAN,EAAKgB,KAAI,SAACM,GACR,OACE,cAAC,EAAD,CACE5B,gBAAiBmB,EAEjBlB,KAAM2B,EAAK3B,KACXT,QAASoC,EAAKpC,SAFToC,EAAKxB,YCrETyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.84bd4eec.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nconst Card = (props) => {\r\n    const [clicked, setClicked] = useState(false)\r\n    const [position, setPosition] = useState(1)\r\n    function isClicked(){\r\n        if(clicked){\r\n            console.log('has been clicked!')\r\n            props.updateScoreFunc(clicked)\r\n        }else{\r\n            console.log(`has NOT been clicked!`) \r\n            props.updateScoreFunc(clicked)\r\n            setClicked(true);\r\n        }    \r\n    }\r\n    return(\r\n        <div style={{margin:20,padding: 20, backgroundColor: props.bgcolor, border:'solid', cursor:'pointer',borderColor: 'red', color:'white'}} onClick={()=>{isClicked();}}>{props.text}</div>\r\n    )\r\n}\r\nexport default Card","\nimport './App.css';\nimport './crt.css'\nimport Card from './components/Card'\nimport randomColor from 'randomcolor'\nimport {useState} from 'react'\nfunction App() {\n  const newArry = [\n    { key: 1, bgcolor: randomColor(), text: \"1\" },\n    { key: 2, bgcolor: randomColor(), text: \"2\" },\n    { key: 3, bgcolor: randomColor(), text: \"3\" },\n    { key: 4, bgcolor: randomColor(), text: \"4\" },\n    { key: 5, bgcolor: randomColor(),text: \"5\" },\n    { key: 6, bgcolor: randomColor(), text: \"6\" },\n    { key: 7, bgcolor: randomColor(), text: \"7\" },\n    { key: 8, bgcolor: randomColor(), text: \"8\" }\n  ];\n\n  const [arry, setArry] = useState(newArry);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  function shuffleFunct() {\n    let newarry = [...arry];\n    console.log(\"newarry\" + { ...newarry });\n    shuffle(newarry);\n    setArry(newarry);\n  }\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  // function createArray() {\n  //   return;\n  // }\n  function updateScore(clicked) {\n    \n    if (clicked) {\n      setCurrentScore(0);\n      setGameOver(true);\n      setTimeout(() => {\n        setGameOver(false);\n      }, 1000);\n      let randomArry = newArry.map((i) => {\n        return {\n          key: i.key,\n          bgcolor: randomColor(),\n          text: getRandomInt(12345678910111213)\n        };\n      });\n      setArry(randomArry);\n    } else {\n      if (highScore <= currentScore) {\n        console.log(currentScore);\n        console.log(highScore);\n        setHighScore(currentScore + 1);\n      }\n      shuffleFunct();\n\n      setCurrentScore((e) => {\n        return e + 1;\n      });\n    }\n  }\n\n  function shuffle(array) {\n    array.sort(() => Math.random() - 0.5);\n  }\n  function resetGame() {}\n  return (\n    <div className=\"crt\">\n      <div>\n        {\" \"}\n        CURRENT SCORE: {currentScore} HIGH SCORE {highScore}\n      </div>\n      {gameOver ? (\n        <p>GAMEOVER</p>\n      ) : (\n        arry.map((card) => {\n          return (\n            <Card\n              updateScoreFunc={updateScore}\n              key={card.key}\n              text={card.text}\n              bgcolor={card.bgcolor}\n            />\n          );\n        })\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}